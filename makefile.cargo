
ifneq ($(HOST),$(TARGET))
  CXX ?= $(TARGET)-g++
  CC ?= $(TARGET)-gcc
  AR ?= $(TARGET)-ar
else
  CXX ?= g++
  CC ?= gcc
  AR ?= ar
endif

ifeq ($(DEBUG),true)
  FLAGS += -g
else
  FLAGS += -O2
endif

CFLAGS += $(FLAGS)
CXXFLAGS += $(FLAGS)

ICU_CONFIGURE_FLAGS = \
	--prefix=$(OUT_DIR) \
	--host=$(TARGET) \
	--enable-static \
	--disable-shared

HB_CONFIGURE_FLAGS = \
	--prefix=$(OUT_DIR) \
	--host=$(TARGET) \
	--enable-static \
	--disable-shared \
	--with-icu \
	--without-freetype \
	--without-glib

ICU_BUILD_DIR=$(OUT_DIR)/icu_build

# Create a unique temporary build directory
HB_BUILD_DIR := $(shell mktemp -d $(OUT_DIR)/rust_build.XXXXX)

# ICU uses the $TARGET environment variable to mean something else
TARGET=

all:
	mkdir -p $(ICU_BUILD_DIR)
	cd $(ICU_BUILD_DIR) && $(CARGO_MANIFEST_DIR)/minikin/third-party/icu/icu4c/source/configure $(ICU_CONFIGURE_FLAGS) \
		CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)"
	make -j$(NUM_JOBS) -C $(ICU_BUILD_DIR) all
	make -C $(ICU_BUILD_DIR) install

	# Copy source files to BUILD_DIR to avoid changing originals.
	cp -a $(CARGO_MANIFEST_DIR)/minikin/third-party/harfbuzz/* $(HB_BUILD_DIR)

	# Touch in BUILD_DIR avoid regenerating files.
	#$(MAKE) -f $(CARGO_MANIFEST_DIR)/makefile.touch touch HARFBUZZ="$(HB_BUILD_DIR)"
	# Configure and build in BUILD_DIR, install from BUILD_DIR into OUT_DIR.
	cd $(HB_BUILD_DIR) && \
      ./autogen.sh && \
	  ./configure $(HB_CONFIGURE_FLAGS) CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" CPPFLAGS="$(CPPFLAGS)" PKG_CONFIG_PATH="$(OUT_DIR)/lib/pkgconfig/" && \
	  make -j$(NUM_JOBS) && \
	  make install
	# Remove the no-longer-needed BUILD_DIR to save space.
	rm -rf $(HB_BUILD_DIR)


.PHONY: all